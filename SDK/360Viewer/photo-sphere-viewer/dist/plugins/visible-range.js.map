{"version":3,"file":"visible-range.js","sources":["../../src/plugins/visible-range/index.js"],"sourcesContent":["import * as THREE from 'three';\nimport { AbstractPlugin, CONSTANTS, utils } from '../..';\n\n\n/**\n * @typedef {Object} PSV.plugins.VisibleRangePlugin.Options\n * @property {double[]|string[]} [latitudeRange] - latitude range as two angles\n * @property {double[]|string[]} [longitudeRange] - longitude range as two angles\n * @property {boolean} [usePanoData=false] - use panoData as visible range, you can also manually call `setRangesFromPanoData`\n */\n\n\n/**\n * @summary Locks visible longitude and/or latitude\n * @extends PSV.plugins.AbstractPlugin\n * @memberof PSV.plugins\n */\nexport class VisibleRangePlugin extends AbstractPlugin {\n\n  static id = 'visible-range';\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.plugins.VisibleRangePlugin.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    /**\n     * @member {PSV.plugins.VisibleRangePlugin.Options}\n     * @private\n     */\n    this.config = {\n      latitudeRange : null,\n      longitudeRange: null,\n      usePanoData   : false,\n      ...options,\n    };\n  }\n\n  /**\n   * @package\n   */\n  init() {\n    super.init();\n\n    this.psv.on(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\n    this.psv.on(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.on(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n    this.psv.on(CONSTANTS.CHANGE_EVENTS.GET_ANIMATE_POSITION, this);\n    this.psv.on(CONSTANTS.CHANGE_EVENTS.GET_ROTATE_POSITION, this);\n\n    this.setLatitudeRange(this.config.latitudeRange);\n    this.setLongitudeRange(this.config.longitudeRange);\n  }\n\n  /**\n   * @package\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\n    this.psv.off(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.off(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n    this.psv.off(CONSTANTS.CHANGE_EVENTS.GET_ANIMATE_POSITION, this);\n    this.psv.off(CONSTANTS.CHANGE_EVENTS.GET_ROTATE_POSITION, this);\n\n    super.destroy();\n  }\n\n  /**\n   * @private\n   */\n  // eslint-disable-next-line consistent-return\n  handleEvent(e) {\n    switch (e.type) {\n      case CONSTANTS.CHANGE_EVENTS.GET_ANIMATE_POSITION:\n      case CONSTANTS.CHANGE_EVENTS.GET_ROTATE_POSITION:\n        return this.applyRanges(e.value).rangedPosition;\n\n      case CONSTANTS.EVENTS.POSITION_UPDATED:\n        const { sidesReached } = this.applyRanges(e.args[0]);\n        if ((sidesReached.left || sidesReached.right) && this.psv.isAutorotateEnabled()) {\n          this.__reverseAutorotate(sidesReached.left, sidesReached.right);\n        }\n        break;\n\n      case CONSTANTS.EVENTS.PANORAMA_LOADED:\n        if (this.config.usePanoData) {\n          this.setRangesFromPanoData();\n        }\n        break;\n\n      case CONSTANTS.EVENTS.ZOOM_UPDATED:\n        const currentPosition = this.psv.getPosition();\n        const { rangedPosition } = this.applyRanges(currentPosition);\n        if (currentPosition.longitude !== rangedPosition.longitude || currentPosition.latitude !== rangedPosition.latitude) {\n          this.psv.rotate(rangedPosition);\n        }\n        break;\n\n      default:\n    }\n  }\n\n  /**\n   * @summary Changes the latitude range\n   * @param {double[]|string[]} range - latitude range as two angles\n   */\n  setLatitudeRange(range) {\n    // latitude range must have two values\n    if (range && range.length !== 2) {\n      utils.logWarn('latitude range must have exactly two elements');\n      range = null;\n    }\n    // latitude range must be ordered\n    else if (range && range[0] > range[1]) {\n      utils.logWarn('latitude range values must be ordered');\n      range = [range[1], range[0]];\n    }\n    // latitude range is between -PI/2 and PI/2\n    if (range) {\n      this.config.latitudeRange = range.map(angle => utils.parseAngle(angle, true));\n    }\n    else {\n      this.config.latitudeRange = null;\n    }\n\n    if (this.psv.prop.ready) {\n      this.psv.rotate(this.psv.getPosition());\n    }\n  }\n\n  /**\n   * @summary Changes the longitude range\n   * @param {double[]|string[]} range - longitude range as two angles\n   */\n  setLongitudeRange(range) {\n    // longitude range must have two values\n    if (range && range.length !== 2) {\n      utils.logWarn('longitude range must have exactly two elements');\n      range = null;\n    }\n    // longitude range is between 0 and 2*PI\n    if (range) {\n      this.config.longitudeRange = range.map(angle => utils.parseAngle(angle));\n    }\n    else {\n      this.config.longitudeRange = null;\n    }\n\n    if (this.psv.prop.ready) {\n      this.psv.rotate(this.psv.getPosition());\n    }\n  }\n\n  /**\n   * @summary Changes the latitude and longitude ranges according the current panorama cropping data\n   */\n  setRangesFromPanoData() {\n    this.setLatitudeRange(this.getPanoLatitudeRange());\n    this.setLongitudeRange(this.getPanoLongitudeRange());\n  }\n\n  /**\n   * @summary Gets the latitude range defined by the viewer's panoData\n   * @returns {double[]|null}\n   * @private\n   */\n  getPanoLatitudeRange() {\n    const p = this.psv.prop.panoData;\n    if (p.croppedHeight === p.fullHeight && p.croppedY === 0) {\n      return null;\n    }\n    else {\n      const latitude = y => Math.PI * (1 - y / p.fullHeight) - (Math.PI / 2);\n      return [latitude(p.croppedY), latitude(p.croppedY + p.croppedHeight)];\n    }\n  }\n\n  /**\n   * @summary Gets the longitude range defined by the viewer's panoData\n   * @returns {double[]|null}\n   * @private\n   */\n  getPanoLongitudeRange() {\n    const p = this.psv.prop.panoData;\n    if (p.croppedWidth === p.fullWidth && p.croppedX === 0) {\n      return null;\n    }\n    else {\n      const longitude = x => 2 * Math.PI * (x / p.fullWidth) - Math.PI;\n      return [longitude(p.croppedX), longitude(p.croppedX + p.croppedWidth)];\n    }\n  }\n\n  /**\n   * @summary Apply \"longitudeRange\" and \"latitudeRange\"\n   * @param {PSV.Position} position\n   * @returns {{rangedPosition: PSV.Position, sidesReached: string[]}}\n   * @private\n   */\n  applyRanges(position) {\n    const rangedPosition = {\n      longitude: position.longitude,\n      latitude : position.latitude,\n    };\n    const sidesReached = {};\n\n    let range;\n    let offset;\n\n    if (this.config.longitudeRange) {\n      range = utils.clone(this.config.longitudeRange);\n      offset = THREE.Math.degToRad(this.psv.prop.hFov) / 2;\n\n      range[0] = utils.parseAngle(range[0] + offset);\n      range[1] = utils.parseAngle(range[1] - offset);\n\n      if (range[0] > range[1]) { // when the range cross longitude 0\n        if (position.longitude > range[1] && position.longitude < range[0]) {\n          if (position.longitude > (range[0] / 2 + range[1] / 2)) { // detect which side we are closer too\n            rangedPosition.longitude = range[0];\n            sidesReached.left = true;\n          }\n          else {\n            rangedPosition.longitude = range[1];\n            sidesReached.right = true;\n          }\n        }\n      }\n      else if (position.longitude < range[0]) {\n        rangedPosition.longitude = range[0];\n        sidesReached.left = true;\n      }\n      else if (position.longitude > range[1]) {\n        rangedPosition.longitude = range[1];\n        sidesReached.right = true;\n      }\n    }\n\n    if (this.config.latitudeRange) {\n      range = utils.clone(this.config.latitudeRange);\n      offset = THREE.Math.degToRad(this.psv.prop.vFov) / 2;\n\n      range[0] = utils.parseAngle(Math.min(range[0] + offset, range[1]), true);\n      range[1] = utils.parseAngle(Math.max(range[1] - offset, range[0]), true);\n\n      if (position.latitude < range[0]) {\n        rangedPosition.latitude = range[0];\n        sidesReached.bottom = true;\n      }\n      else if (position.latitude > range[1]) {\n        rangedPosition.latitude = range[1];\n        sidesReached.top = true;\n      }\n    }\n\n    return { rangedPosition, sidesReached };\n  }\n\n  /**\n   * @summary Reverses autorotate direction with smooth transition\n   * @private\n   */\n  __reverseAutorotate(left, right) {\n    // reverse already ongoing\n    if (left && this.psv.config.autorotateSpeed > 0 || right && this.psv.config.autorotateSpeed < 0) {\n      return;\n    }\n\n    this.psv.config.autorotateSpeed = -this.psv.config.autorotateSpeed;\n    this.psv.startAutorotate(true);\n  }\n\n}\n"],"names":["VisibleRangePlugin","psv","options","config","latitudeRange","longitudeRange","usePanoData","init","on","CONSTANTS","EVENTS","PANORAMA_LOADED","POSITION_UPDATED","ZOOM_UPDATED","CHANGE_EVENTS","GET_ANIMATE_POSITION","GET_ROTATE_POSITION","setLatitudeRange","setLongitudeRange","destroy","off","handleEvent","e","type","applyRanges","value","rangedPosition","args","sidesReached","left","right","isAutorotateEnabled","__reverseAutorotate","setRangesFromPanoData","currentPosition","getPosition","longitude","latitude","rotate","range","length","utils","logWarn","map","angle","parseAngle","prop","ready","getPanoLatitudeRange","getPanoLongitudeRange","p","panoData","croppedHeight","fullHeight","croppedY","y","Math","PI","croppedWidth","fullWidth","croppedX","x","position","offset","clone","THREE","degToRad","hFov","vFov","min","max","bottom","top","autorotateSpeed","startAutorotate","AbstractPlugin","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAIA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;;MACaA,kBAAb;EAAA;;EAIE;EACF;EACA;EACA;EACE,8BAAYC,GAAZ,EAAiBC,OAAjB,EAA0B;EAAA;;EACxB,uCAAMD,GAAN;EAEA;EACJ;EACA;EACA;;EACI,UAAKE,MAAL;EACEC,MAAAA,aAAa,EAAG,IADlB;EAEEC,MAAAA,cAAc,EAAE,IAFlB;EAGEC,MAAAA,WAAW,EAAK;EAHlB,OAIKJ,OAJL;EAPwB;EAazB;EAED;EACF;EACA;;;EAzBA;;EAAA,SA0BEK,IA1BF,GA0BE,gBAAO;EACL,8BAAMA,IAAN;;EAEA,SAAKN,GAAL,CAASO,EAAT,CAAYC,2BAAS,CAACC,MAAV,CAAiBC,eAA7B,EAA8C,IAA9C;EACA,SAAKV,GAAL,CAASO,EAAT,CAAYC,2BAAS,CAACC,MAAV,CAAiBE,gBAA7B,EAA+C,IAA/C;EACA,SAAKX,GAAL,CAASO,EAAT,CAAYC,2BAAS,CAACC,MAAV,CAAiBG,YAA7B,EAA2C,IAA3C;EACA,SAAKZ,GAAL,CAASO,EAAT,CAAYC,2BAAS,CAACK,aAAV,CAAwBC,oBAApC,EAA0D,IAA1D;EACA,SAAKd,GAAL,CAASO,EAAT,CAAYC,2BAAS,CAACK,aAAV,CAAwBE,mBAApC,EAAyD,IAAzD;EAEA,SAAKC,gBAAL,CAAsB,KAAKd,MAAL,CAAYC,aAAlC;EACA,SAAKc,iBAAL,CAAuB,KAAKf,MAAL,CAAYE,cAAnC;EACD;EAED;EACF;EACA;EAzCA;;EAAA,SA0CEc,OA1CF,GA0CE,mBAAU;EACR,SAAKlB,GAAL,CAASmB,GAAT,CAAaX,2BAAS,CAACC,MAAV,CAAiBC,eAA9B,EAA+C,IAA/C;EACA,SAAKV,GAAL,CAASmB,GAAT,CAAaX,2BAAS,CAACC,MAAV,CAAiBE,gBAA9B,EAAgD,IAAhD;EACA,SAAKX,GAAL,CAASmB,GAAT,CAAaX,2BAAS,CAACC,MAAV,CAAiBG,YAA9B,EAA4C,IAA5C;EACA,SAAKZ,GAAL,CAASmB,GAAT,CAAaX,2BAAS,CAACK,aAAV,CAAwBC,oBAArC,EAA2D,IAA3D;EACA,SAAKd,GAAL,CAASmB,GAAT,CAAaX,2BAAS,CAACK,aAAV,CAAwBE,mBAArC,EAA0D,IAA1D;;EAEA,8BAAMG,OAAN;EACD;EAED;EACF;EACA;EACE;EAvDF;;EAAA,SAwDEE,WAxDF,GAwDE,qBAAYC,CAAZ,EAAe;EACb,YAAQA,CAAC,CAACC,IAAV;EACE,WAAKd,2BAAS,CAACK,aAAV,CAAwBC,oBAA7B;EACA,WAAKN,2BAAS,CAACK,aAAV,CAAwBE,mBAA7B;EACE,eAAO,KAAKQ,WAAL,CAAiBF,CAAC,CAACG,KAAnB,EAA0BC,cAAjC;;EAEF,WAAKjB,2BAAS,CAACC,MAAV,CAAiBE,gBAAtB;EACE,gCAAyB,KAAKY,WAAL,CAAiBF,CAAC,CAACK,IAAF,CAAO,CAAP,CAAjB,CAAzB;EAAA,YAAQC,YAAR,qBAAQA,YAAR;;EACA,YAAI,CAACA,YAAY,CAACC,IAAb,IAAqBD,YAAY,CAACE,KAAnC,KAA6C,KAAK7B,GAAL,CAAS8B,mBAAT,EAAjD,EAAiF;EAC/E,eAAKC,mBAAL,CAAyBJ,YAAY,CAACC,IAAtC,EAA4CD,YAAY,CAACE,KAAzD;EACD;;EACD;;EAEF,WAAKrB,2BAAS,CAACC,MAAV,CAAiBC,eAAtB;EACE,YAAI,KAAKR,MAAL,CAAYG,WAAhB,EAA6B;EAC3B,eAAK2B,qBAAL;EACD;;EACD;;EAEF,WAAKxB,2BAAS,CAACC,MAAV,CAAiBG,YAAtB;EACE,YAAMqB,eAAe,GAAG,KAAKjC,GAAL,CAASkC,WAAT,EAAxB;;EACA,iCAA2B,KAAKX,WAAL,CAAiBU,eAAjB,CAA3B;EAAA,YAAQR,cAAR,sBAAQA,cAAR;;EACA,YAAIQ,eAAe,CAACE,SAAhB,KAA8BV,cAAc,CAACU,SAA7C,IAA0DF,eAAe,CAACG,QAAhB,KAA6BX,cAAc,CAACW,QAA1G,EAAoH;EAClH,eAAKpC,GAAL,CAASqC,MAAT,CAAgBZ,cAAhB;EACD;;EACD;EAxBJ;EA4BD;EAED;EACF;EACA;EACA;EA1FA;;EAAA,SA2FET,gBA3FF,GA2FE,0BAAiBsB,KAAjB,EAAwB;EACtB;EACA,QAAIA,KAAK,IAAIA,KAAK,CAACC,MAAN,KAAiB,CAA9B,EAAiC;EAC/BC,MAAAA,uBAAK,CAACC,OAAN,CAAc,+CAAd;EACAH,MAAAA,KAAK,GAAG,IAAR;EACD,KAHD;EAAA,SAKK,IAAIA,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAA7B,EAAkC;EACrCE,MAAAA,uBAAK,CAACC,OAAN,CAAc,uCAAd;EACAH,MAAAA,KAAK,GAAG,CAACA,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,CAAR;EACD,KAVqB;;;EAYtB,QAAIA,KAAJ,EAAW;EACT,WAAKpC,MAAL,CAAYC,aAAZ,GAA4BmC,KAAK,CAACI,GAAN,CAAU,UAAAC,KAAK;EAAA,eAAIH,uBAAK,CAACI,UAAN,CAAiBD,KAAjB,EAAwB,IAAxB,CAAJ;EAAA,OAAf,CAA5B;EACD,KAFD,MAGK;EACH,WAAKzC,MAAL,CAAYC,aAAZ,GAA4B,IAA5B;EACD;;EAED,QAAI,KAAKH,GAAL,CAAS6C,IAAT,CAAcC,KAAlB,EAAyB;EACvB,WAAK9C,GAAL,CAASqC,MAAT,CAAgB,KAAKrC,GAAL,CAASkC,WAAT,EAAhB;EACD;EACF;EAED;EACF;EACA;EACA;EAtHA;;EAAA,SAuHEjB,iBAvHF,GAuHE,2BAAkBqB,KAAlB,EAAyB;EACvB;EACA,QAAIA,KAAK,IAAIA,KAAK,CAACC,MAAN,KAAiB,CAA9B,EAAiC;EAC/BC,MAAAA,uBAAK,CAACC,OAAN,CAAc,gDAAd;EACAH,MAAAA,KAAK,GAAG,IAAR;EACD,KALsB;;;EAOvB,QAAIA,KAAJ,EAAW;EACT,WAAKpC,MAAL,CAAYE,cAAZ,GAA6BkC,KAAK,CAACI,GAAN,CAAU,UAAAC,KAAK;EAAA,eAAIH,uBAAK,CAACI,UAAN,CAAiBD,KAAjB,CAAJ;EAAA,OAAf,CAA7B;EACD,KAFD,MAGK;EACH,WAAKzC,MAAL,CAAYE,cAAZ,GAA6B,IAA7B;EACD;;EAED,QAAI,KAAKJ,GAAL,CAAS6C,IAAT,CAAcC,KAAlB,EAAyB;EACvB,WAAK9C,GAAL,CAASqC,MAAT,CAAgB,KAAKrC,GAAL,CAASkC,WAAT,EAAhB;EACD;EACF;EAED;EACF;EACA;EA5IA;;EAAA,SA6IEF,qBA7IF,GA6IE,iCAAwB;EACtB,SAAKhB,gBAAL,CAAsB,KAAK+B,oBAAL,EAAtB;EACA,SAAK9B,iBAAL,CAAuB,KAAK+B,qBAAL,EAAvB;EACD;EAED;EACF;EACA;EACA;EACA;EAtJA;;EAAA,SAuJED,oBAvJF,GAuJE,gCAAuB;EACrB,QAAME,CAAC,GAAG,KAAKjD,GAAL,CAAS6C,IAAT,CAAcK,QAAxB;;EACA,QAAID,CAAC,CAACE,aAAF,KAAoBF,CAAC,CAACG,UAAtB,IAAoCH,CAAC,CAACI,QAAF,KAAe,CAAvD,EAA0D;EACxD,aAAO,IAAP;EACD,KAFD,MAGK;EACH,UAAMjB,QAAQ,GAAG,SAAXA,QAAW,CAAAkB,CAAC;EAAA,eAAIC,IAAI,CAACC,EAAL,IAAW,IAAIF,CAAC,GAAGL,CAAC,CAACG,UAArB,IAAoCG,IAAI,CAACC,EAAL,GAAU,CAAlD;EAAA,OAAlB;;EACA,aAAO,CAACpB,QAAQ,CAACa,CAAC,CAACI,QAAH,CAAT,EAAuBjB,QAAQ,CAACa,CAAC,CAACI,QAAF,GAAaJ,CAAC,CAACE,aAAhB,CAA/B,CAAP;EACD;EACF;EAED;EACF;EACA;EACA;EACA;EAtKA;;EAAA,SAuKEH,qBAvKF,GAuKE,iCAAwB;EACtB,QAAMC,CAAC,GAAG,KAAKjD,GAAL,CAAS6C,IAAT,CAAcK,QAAxB;;EACA,QAAID,CAAC,CAACQ,YAAF,KAAmBR,CAAC,CAACS,SAArB,IAAkCT,CAAC,CAACU,QAAF,KAAe,CAArD,EAAwD;EACtD,aAAO,IAAP;EACD,KAFD,MAGK;EACH,UAAMxB,SAAS,GAAG,SAAZA,SAAY,CAAAyB,CAAC;EAAA,eAAI,IAAIL,IAAI,CAACC,EAAT,IAAeI,CAAC,GAAGX,CAAC,CAACS,SAArB,IAAkCH,IAAI,CAACC,EAA3C;EAAA,OAAnB;;EACA,aAAO,CAACrB,SAAS,CAACc,CAAC,CAACU,QAAH,CAAV,EAAwBxB,SAAS,CAACc,CAAC,CAACU,QAAF,GAAaV,CAAC,CAACQ,YAAhB,CAAjC,CAAP;EACD;EACF;EAED;EACF;EACA;EACA;EACA;EACA;EAvLA;;EAAA,SAwLElC,WAxLF,GAwLE,qBAAYsC,QAAZ,EAAsB;EACpB,QAAMpC,cAAc,GAAG;EACrBU,MAAAA,SAAS,EAAE0B,QAAQ,CAAC1B,SADC;EAErBC,MAAAA,QAAQ,EAAGyB,QAAQ,CAACzB;EAFC,KAAvB;EAIA,QAAMT,YAAY,GAAG,EAArB;EAEA,QAAIW,KAAJ;EACA,QAAIwB,MAAJ;;EAEA,QAAI,KAAK5D,MAAL,CAAYE,cAAhB,EAAgC;EAC9BkC,MAAAA,KAAK,GAAGE,uBAAK,CAACuB,KAAN,CAAY,KAAK7D,MAAL,CAAYE,cAAxB,CAAR;EACA0D,MAAAA,MAAM,GAAGE,KAAK,CAACT,IAAN,CAAWU,QAAX,CAAoB,KAAKjE,GAAL,CAAS6C,IAAT,CAAcqB,IAAlC,IAA0C,CAAnD;EAEA5B,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWE,uBAAK,CAACI,UAAN,CAAiBN,KAAK,CAAC,CAAD,CAAL,GAAWwB,MAA5B,CAAX;EACAxB,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWE,uBAAK,CAACI,UAAN,CAAiBN,KAAK,CAAC,CAAD,CAAL,GAAWwB,MAA5B,CAAX;;EAEA,UAAIxB,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAApB,EAAyB;EAAE;EACzB,YAAIuB,QAAQ,CAAC1B,SAAT,GAAqBG,KAAK,CAAC,CAAD,CAA1B,IAAiCuB,QAAQ,CAAC1B,SAAT,GAAqBG,KAAK,CAAC,CAAD,CAA/D,EAAoE;EAClE,cAAIuB,QAAQ,CAAC1B,SAAT,GAAsBG,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX,GAAeA,KAAK,CAAC,CAAD,CAAL,GAAW,CAApD,EAAwD;EAAE;EACxDb,YAAAA,cAAc,CAACU,SAAf,GAA2BG,KAAK,CAAC,CAAD,CAAhC;EACAX,YAAAA,YAAY,CAACC,IAAb,GAAoB,IAApB;EACD,WAHD,MAIK;EACHH,YAAAA,cAAc,CAACU,SAAf,GAA2BG,KAAK,CAAC,CAAD,CAAhC;EACAX,YAAAA,YAAY,CAACE,KAAb,GAAqB,IAArB;EACD;EACF;EACF,OAXD,MAYK,IAAIgC,QAAQ,CAAC1B,SAAT,GAAqBG,KAAK,CAAC,CAAD,CAA9B,EAAmC;EACtCb,QAAAA,cAAc,CAACU,SAAf,GAA2BG,KAAK,CAAC,CAAD,CAAhC;EACAX,QAAAA,YAAY,CAACC,IAAb,GAAoB,IAApB;EACD,OAHI,MAIA,IAAIiC,QAAQ,CAAC1B,SAAT,GAAqBG,KAAK,CAAC,CAAD,CAA9B,EAAmC;EACtCb,QAAAA,cAAc,CAACU,SAAf,GAA2BG,KAAK,CAAC,CAAD,CAAhC;EACAX,QAAAA,YAAY,CAACE,KAAb,GAAqB,IAArB;EACD;EACF;;EAED,QAAI,KAAK3B,MAAL,CAAYC,aAAhB,EAA+B;EAC7BmC,MAAAA,KAAK,GAAGE,uBAAK,CAACuB,KAAN,CAAY,KAAK7D,MAAL,CAAYC,aAAxB,CAAR;EACA2D,MAAAA,MAAM,GAAGE,KAAK,CAACT,IAAN,CAAWU,QAAX,CAAoB,KAAKjE,GAAL,CAAS6C,IAAT,CAAcsB,IAAlC,IAA0C,CAAnD;EAEA7B,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWE,uBAAK,CAACI,UAAN,CAAiBW,IAAI,CAACa,GAAL,CAAS9B,KAAK,CAAC,CAAD,CAAL,GAAWwB,MAApB,EAA4BxB,KAAK,CAAC,CAAD,CAAjC,CAAjB,EAAwD,IAAxD,CAAX;EACAA,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWE,uBAAK,CAACI,UAAN,CAAiBW,IAAI,CAACc,GAAL,CAAS/B,KAAK,CAAC,CAAD,CAAL,GAAWwB,MAApB,EAA4BxB,KAAK,CAAC,CAAD,CAAjC,CAAjB,EAAwD,IAAxD,CAAX;;EAEA,UAAIuB,QAAQ,CAACzB,QAAT,GAAoBE,KAAK,CAAC,CAAD,CAA7B,EAAkC;EAChCb,QAAAA,cAAc,CAACW,QAAf,GAA0BE,KAAK,CAAC,CAAD,CAA/B;EACAX,QAAAA,YAAY,CAAC2C,MAAb,GAAsB,IAAtB;EACD,OAHD,MAIK,IAAIT,QAAQ,CAACzB,QAAT,GAAoBE,KAAK,CAAC,CAAD,CAA7B,EAAkC;EACrCb,QAAAA,cAAc,CAACW,QAAf,GAA0BE,KAAK,CAAC,CAAD,CAA/B;EACAX,QAAAA,YAAY,CAAC4C,GAAb,GAAmB,IAAnB;EACD;EACF;;EAED,WAAO;EAAE9C,MAAAA,cAAc,EAAdA,cAAF;EAAkBE,MAAAA,YAAY,EAAZA;EAAlB,KAAP;EACD;EAED;EACF;EACA;EACA;EAtPA;;EAAA,SAuPEI,mBAvPF,GAuPE,6BAAoBH,IAApB,EAA0BC,KAA1B,EAAiC;EAC/B;EACA,QAAID,IAAI,IAAI,KAAK5B,GAAL,CAASE,MAAT,CAAgBsE,eAAhB,GAAkC,CAA1C,IAA+C3C,KAAK,IAAI,KAAK7B,GAAL,CAASE,MAAT,CAAgBsE,eAAhB,GAAkC,CAA9F,EAAiG;EAC/F;EACD;;EAED,SAAKxE,GAAL,CAASE,MAAT,CAAgBsE,eAAhB,GAAkC,CAAC,KAAKxE,GAAL,CAASE,MAAT,CAAgBsE,eAAnD;EACA,SAAKxE,GAAL,CAASyE,eAAT,CAAyB,IAAzB;EACD,GA/PH;;EAAA;EAAA,EAAwCC,gCAAxC;EAAa3E,mBAEJ4E,KAAK;;;;;;;;;;"}