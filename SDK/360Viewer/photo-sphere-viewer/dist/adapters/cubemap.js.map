{"version":3,"file":"cubemap.js","sources":["../../src/adapters/cubemap/index.js"],"sourcesContent":["import * as THREE from 'three';\nimport { AbstractAdapter, CONSTANTS, PSVError, SYSTEM, utils } from '../..';\n\n\n/**\n * @typedef {Object} PSV.adapters.CubemapAdapter.Cubemap\n * @summary Object defining a cubemap\n * @property {string} left\n * @property {string} front\n * @property {string} right\n * @property {string} back\n * @property {string} top\n * @property {string} bottom\n */\n\n/**\n * @typedef {Object} PSV.adapters.CubemapAdapter.Options\n * @property {boolean} [flipTopBottom=false] - set to true if the top and bottom faces are not correctly oriented\n */\n\n\n// PSV faces order is left, front, right, back, top, bottom\n// 3JS faces order is left, right, top, bottom, back, front\nexport const CUBE_ARRAY = [0, 2, 4, 5, 3, 1];\nexport const CUBE_HASHMAP = ['left', 'right', 'top', 'bottom', 'back', 'front'];\n\n\n/**\n * @summary Adapter for cubemaps\n * @memberof PSV.adapters\n * @extends PSV.adapters.AbstractAdapter\n */\nexport class CubemapAdapter extends AbstractAdapter {\n\n  static id = 'cubemap';\n  static supportsDownload = false;\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.adapters.CubemapAdapter.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    /**\n     * @member {PSV.adapters.CubemapAdapter.Options}\n     * @private\n     */\n    this.config = {\n      flipTopBottom: false,\n      ...options,\n    };\n  }\n\n  /**\n   * @override\n   */\n  supportsTransition() {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  supportsPreload() {\n    return true;\n  }\n\n  /**\n   * @override\n   * @param {string[] | PSV.adapters.CubemapAdapter.Cubemap} panorama\n   * @returns {Promise.<PSV.TextureData>}\n   */\n  loadTexture(panorama) {\n    const cleanPanorama = [];\n\n    if (Array.isArray(panorama)) {\n      if (panorama.length !== 6) {\n        return Promise.reject(new PSVError('Must provide exactly 6 image paths when using cubemap.'));\n      }\n\n      // reorder images\n      for (let i = 0; i < 6; i++) {\n        cleanPanorama[i] = panorama[CUBE_ARRAY[i]];\n      }\n    }\n    else if (typeof panorama === 'object') {\n      if (!CUBE_HASHMAP.every(side => !!panorama[side])) {\n        return Promise.reject(new PSVError('Must provide exactly left, front, right, back, top, bottom when using cubemap.'));\n      }\n\n      // transform into array\n      CUBE_HASHMAP.forEach((side, i) => {\n        cleanPanorama[i] = panorama[side];\n      });\n    }\n    else {\n      return Promise.reject(new PSVError('Invalid cubemap panorama, are you using the right adapter?'));\n    }\n\n    if (this.psv.config.fisheye) {\n      utils.logWarn('fisheye effect with cubemap texture can generate distorsion');\n    }\n\n    const promises = [];\n    const progress = [0, 0, 0, 0, 0, 0];\n\n    for (let i = 0; i < 6; i++) {\n      promises.push(\n        this.psv.textureLoader.loadImage(cleanPanorama[i], (p) => {\n          progress[i] = p;\n          this.psv.loader.setProgress(utils.sum(progress) / 6);\n        })\n          .then(img => this.__createCubemapTexture(img))\n      );\n    }\n\n    return Promise.all(promises)\n      .then(texture => ({ panorama, texture }));\n  }\n\n  /**\n   * @summary Creates the final texture from image\n   * @param {HTMLImageElement} img\n   * @returns {external:THREE.Texture}\n   * @private\n   */\n  __createCubemapTexture(img) {\n    if (img.width !== img.height) {\n      utils.logWarn('Invalid base image, the width equal the height');\n    }\n\n    // resize image\n    if (img.width > SYSTEM.maxTextureWidth) {\n      const ratio = SYSTEM.getMaxCanvasWidth() / img.width;\n\n      const buffer = document.createElement('canvas');\n      buffer.width = img.width * ratio;\n      buffer.height = img.height * ratio;\n\n      const ctx = buffer.getContext('2d');\n      ctx.drawImage(img, 0, 0, buffer.width, buffer.height);\n\n      return utils.createTexture(buffer);\n    }\n\n    return utils.createTexture(img);\n  }\n\n  /**\n   * @override\n   */\n  createMesh(scale = 1) {\n    const cubeSize = CONSTANTS.SPHERE_RADIUS * 2 * scale;\n    const geometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize)\n      .scale(1, 1, -1);\n\n    const materials = [];\n    for (let i = 0; i < 6; i++) {\n      materials.push(new THREE.MeshBasicMaterial());\n    }\n\n    return new THREE.Mesh(geometry, materials);\n  }\n\n  /**\n   * @override\n   */\n  setTexture(mesh, textureData) {\n    const { texture } = textureData;\n\n    for (let i = 0; i < 6; i++) {\n      if (this.config.flipTopBottom && (i === 2 || i === 3)) {\n        texture[i].center = new THREE.Vector2(0.5, 0.5);\n        texture[i].rotation = Math.PI;\n      }\n\n      mesh.material[i].map?.dispose();\n      mesh.material[i].map = texture[i];\n    }\n  }\n\n  /**\n   * @override\n   */\n  setTextureOpacity(mesh, opacity) {\n    for (let i = 0; i < 6; i++) {\n      mesh.material[i].opacity = opacity;\n      mesh.material[i].transparent = opacity < 1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  disposeTexture(textureData) {\n    textureData.texture?.forEach(texture => texture.dispose());\n  }\n\n}\n"],"names":["CUBE_ARRAY","CUBE_HASHMAP","CubemapAdapter","psv","options","config","flipTopBottom","supportsTransition","supportsPreload","loadTexture","panorama","cleanPanorama","Array","isArray","length","Promise","reject","PSVError","i","every","side","forEach","fisheye","utils","logWarn","promises","progress","push","textureLoader","loadImage","p","loader","setProgress","sum","then","img","__createCubemapTexture","all","texture","width","height","SYSTEM","maxTextureWidth","ratio","getMaxCanvasWidth","buffer","document","createElement","ctx","getContext","drawImage","createTexture","createMesh","scale","cubeSize","CONSTANTS","SPHERE_RADIUS","geometry","THREE","BoxGeometry","materials","MeshBasicMaterial","Mesh","setTexture","mesh","textureData","center","Vector2","rotation","Math","PI","material","map","dispose","setTextureOpacity","opacity","transparent","disposeTexture","AbstractAdapter","id","supportsDownload"],"mappings":"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"}